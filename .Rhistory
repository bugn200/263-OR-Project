names(kr_variance) = "Variance"
# Visualise each raster on a map
pred = tm_shape(kr_prediction) +
tm_raster(style="cont", palette="Spectral", midpoint=NA) +
tm_shape(nzpolygon) +tm_borders(col="black",lwd=2)
vari = tm_shape(kr_variance) +
tm_raster(style="cont", palette="Blues", midpoint=NA) +
tm_shape(nzpolygon) +tm_borders(col="black",lwd=2)
# Plot the two maps side-by-side
tmap_arrange(pred,vari)
source("rainfall2015.R")
tmlist=as.list(12)
for(i in 1:12) {
tmlist[[i]]=rainfall2015(i,r)
}
tmap_arrange(tmlist,nrow=3,ncol = 4)
nz.rf.jul=nz.rf|>filter(Date==as.Date("2018-07-01"))
nz.rf.jul=rename(nz.rf.jul,Agent.Number=Station)
jul.stations=inner_join(nz.rf.jul,stations,by="Agent.Number")
jul.stations=st_as_sf(nz.stations,coords=c("Lon","Lat"),crs=4326)
jul.stations=st_transform(nz.stations,crs=2193)
gs = gstat(formula = Rainfall~Height, locations = jul.stations)
source("krheight.R")
krpred=krheight(r)
unik=interpolate(krpred,gs,xyOnly=FALSE)
tm_shape(unik)+tm_raster(title="Prediction for Jul 2018",palette = "Spectral")
akladdr=st_read('akl_addresses')
#tmap_mode("view")
#aklcbd=filter(akladdr,suburb_l_1=="Auckland Central")
#tm_shape(aklcbd)+tm_dots(col="red")
fulladd=function(number, road) {
search=filter(akladdr,full_addre==number&road==full_road_)
return (st_as_sf(search))
}
home=fulladd("8E/208", "Hobson Street")
uoa402=fulladd("20","Symonds Street")|>filter(suburb_l_1=="Auckland Central")
tmap_mode("plot")
uniroute=filter(akladdr,suburb_l_1=="Auckland Central")
tm_shape(uniroute)+tm_dots(col="blue",alpha=0.3)+tm_shape(home)+tm_dots(col="red")+tm_shape(uoa402)+tm_dots(col="red")
library(osrm)
shortest=osrmRoute(home,uoa402)
shortest=st_as_sf(shortest, coords=c("lon","lat"),crs=4326)
library(osrm)
shortest=osrmRoute(home,uoa402)
shortest=st_as_sf(shortest, coords=c("lon","lat"),crs=4326)
install.packages("osrm")
install.packages("osrm")
install.packages("osrm")
library(osrm)
shortest=osrmRoute(home,uoa402)
shortest=st_as_sf(shortest, coords=c("lon","lat"),crs=4326)
library(osrm)
shortest=osrmRoute(home,uoa402)
shortest=st_as_sf(shortest, coords=c("lon","lat"),crs=4326)
library(sp)
library(mapedit)
library(mapview)
library(spData)
library(tidyverse)
library(sf)
library(dismo)
library(raster)
library(tmap)
library(gstat)
library(deldir)
rainfall=read.csv("rainfall.csv")
cali_counties=st_read("counties")
st_crs(cali_counties)
cali_counties=st_transform(cali_counties,3310)
calishape=st_union(cali_counties)
calimat=as.matrix(calishape[[1]])
rainfall=as_tibble(rainfall)
rainfall$annual=apply(rainfall[,6:17],1,sum)
rainfall=st_as_sf(rainfall,coords = c("LONG","LAT"),crs=4326)
rainfall=st_transform(rainfall,3310)
vcali=voronoi(as(rainfall,'Spatial'),st_as_sf(calishape))
vcali=st_set_crs(st_as_sf(vcali),3310)
vclipped=st_intersection(vcali,calishape)
tm_shape(vclipped)+tm_polygons(col="annual")
vcali.longer=pivot_longer(vclipped,c(4:15),names_to = "months", values_to = "Rainfall")
vcali.longer$months=sapply(vcali.longer$months,function(x) grep(paste("(?i)",x,sep=""),month.abb))
vcali.longer=st_transform(st_as_sf(vcali.longer),3310)
tm_shape(vcali.longer)+tm_polygons(col="Rainfall")+tm_facets(by="months",nrow=4,ncol=3)+tm_layout(main.title="California Counties rainfall by months")
r0=raster(st_as_sf(calishape),res=2000,crs=3310)
r0=rasterize(st_as_sf(calishape),r0)
grid1=as(r0,"SpatialGrid")
rainfall_model1=gstat(formula=annual~1,location=rainfall,nmax=1,set=list(idp=1))
rainfall_model2=gstat(formula=annual~1,location=rainfall,nmax=2,set=list(idp=2))
rainfall_model3=gstat(formula=annual~1,location=rainfall,nmax=5,set=list(idp=5))
a1=predict(rainfall_model1,grid1)
a2=predict(rainfall_model2,grid1)
a3=predict(rainfall_model3,grid1)
a1brick=brick(a1)
a1pred=a1brick[[1]] %>% mask(r0)
names(a1pred) = "Rainfall"
tm_shape(a1pred)+tm_raster()+tm_layout(legend.outside = TRUE)
a2brick=brick(a2)
a2pred=a2brick[[1]] %>% mask(r0)
names(a2pred) = "Rainfall"
tm_shape(a2pred)+tm_raster()+tm_layout(legend.outside = TRUE)
a3brick=brick(a3)
a3pred=a3brick[[1]] %>% mask(r0)
names(a3pred) = "Rainfall"
tm_shape(a3pred)+tm_raster()+tm_layout(legend.outside = TRUE)
pred1=as.numeric(nrow(rainfall))
pred2=as.numeric(nrow(rainfall))
pred3=as.numeric(nrow(rainfall))
for (i in 1:nrow(rainfall)) {
rainfall_model1=gstat(formula=annual~1,location=rainfall[-i,],nmax=1,set=list(idp=1))
rainfall_model2=gstat(formula=annual~1,location=rainfall[-i,],nmax=2,set=list(idp=2))
rainfall_model3=gstat(formula=annual~1,location=rainfall[-i,],nmax=5,set=list(idp=5))
predictdata1=predict(rainfall_model1,rainfall[i,])$var1.pred
predictdata2=predict(rainfall_model2,rainfall[i,])$var1.pred
predictdata3=predict(rainfall_model3,rainfall[i,])$var1.pred
pred1[i]=predictdata1
pred2[i]=predictdata2
pred3[i]=predictdata3
}
source("RMSE.R")
observed=rainfall$annual
RMSE(observed,pred1)
RMSE(observed,pred2)
RMSE(observed,pred3)
library(lubridate)
nz.rf=read.csv("nz_rainfall.csv")
stations=read.csv("stations.csv")
nz.rf$Date=my(nz.rf$Date)
nz.rf.jan=nz.rf|>filter(Date==as.Date("2010-01-01"))
nz.rf.jan=rename(nz.rf.jan,Agent.Number=Station)
nz.stations=inner_join(nz.rf.jan,stations,by="Agent.Number")
nz.stations=st_as_sf(nz.stations,coords=c("Lon","Lat"),crs=4326)
nz.stations=st_transform(nz.stations,crs=2193)
nzpolygon = st_as_sf(st_read("nzpolygon"))
nzpolygon = st_intersection(nzpolygon)
# find_extend function is used to find the extend for the shape
source("find_extent.R")
ext = find_extent(nzpolygon, expand=0.05)# change the extent to change the size of the map
# Create an empty RasterLayer and use the nzpolygon to fill the raster
r = raster(ext, res=2000, crs=2193)
r = rasterize(nzpolygon, r)
# Use the local function (overlay) to convert the Raster into a mask
r = overlay(r,fun=function(x){ifelse(x==14,1,NA)})
# Plot the mask
tm_shape(r) + tm_raster()+tm_shape(nz.stations)+tm_dots(col="Rainfall",shape=3,palette="Blues")
gs = gstat(formula = Rainfall~1, locations = nz.stations)
v1 = variogram(gs, width = 100)
v2=variogram(gs, width = 1000)
v3=variogram(gs, width = 5000)
ggplot(v1) + geom_point(aes(x=dist, y=gamma), alpha=0.3)
ggplot(v2) + geom_point(aes(x=dist, y=gamma), alpha=0.3)
ggplot(v3) + geom_point(aes(x=dist, y=gamma), alpha=0.3)
variogram_model=vgm(10000,"Gau",100000,700)
ggplot(v2) + geom_point(aes(x=dist, y=gamma), alpha=0.3) +
geom_line(data=variogramLine(variogram_model, 600000), aes(x=dist, y=gamma), color="red")
k = gstat(formula = Rainfall~1, locations = nz.stations, model=variogram_model, nmax=20)
grid = as(r,"SpatialGrid")
kp = predict(k,grid)
kr_brick = brick(kp)
# Store each later separately
kr_prediction=kr_brick[[1]] %>% mask(r)
kr_variance=kr_brick[[2]] %>% mask(r)
# Update the names of the attributes
names(kr_prediction) = "Prediction"
names(kr_variance) = "Variance"
# Visualise each raster on a map
pred = tm_shape(kr_prediction) +
tm_raster(style="cont", palette="Spectral", midpoint=NA) +
tm_shape(nzpolygon) +tm_borders(col="black",lwd=2)
vari = tm_shape(kr_variance) +
tm_raster(style="cont", palette="Blues", midpoint=NA) +
tm_shape(nzpolygon) +tm_borders(col="black",lwd=2)
# Plot the two maps side-by-side
tmap_arrange(pred,vari)
source("rainfall2015.R")
tmlist=as.list(12)
for(i in 1:12) {
tmlist[[i]]=rainfall2015(i,r)
}
tmap_arrange(tmlist,nrow=3,ncol = 4)
nz.rf.jul=nz.rf|>filter(Date==as.Date("2018-07-01"))
nz.rf.jul=rename(nz.rf.jul,Agent.Number=Station)
jul.stations=inner_join(nz.rf.jul,stations,by="Agent.Number")
jul.stations=st_as_sf(nz.stations,coords=c("Lon","Lat"),crs=4326)
jul.stations=st_transform(nz.stations,crs=2193)
gs = gstat(formula = Rainfall~Height, locations = jul.stations)
source("krheight.R")
krpred=krheight(r)
unik=interpolate(krpred,gs,xyOnly=FALSE)
tm_shape(unik)+tm_raster(title="Prediction for Jul 2018",palette = "Spectral")
akladdr=st_read('akl_addresses')
#tmap_mode("view")
#aklcbd=filter(akladdr,suburb_l_1=="Auckland Central")
#tm_shape(aklcbd)+tm_dots(col="red")
fulladd=function(number, road) {
search=filter(akladdr,full_addre==number&road==full_road_)
return (st_as_sf(search))
}
home=fulladd("8E/208", "Hobson Street")
uoa402=fulladd("20","Symonds Street")|>filter(suburb_l_1=="Auckland Central")
tmap_mode("plot")
uniroute=filter(akladdr,suburb_l_1=="Auckland Central")
tm_shape(uniroute)+tm_dots(col="blue",alpha=0.3)+tm_shape(home)+tm_dots(col="red")+tm_shape(uoa402)+tm_dots(col="red")
library(osrm)
shortest=osrmRoute(home,uoa402)
shortest=st_as_sf(shortest, coords=c("lon","lat"),crs=4326)
shortest=st_transform(shortest, 2193)
shortest_line=shortest|>summarise(do_union=F)|>st_cast("LINESTRING")
tm_shape(uniroute)+tm_dots()+tm_shape(shortest_line)+tm_lines(col="red")
time=osrmTable(src=shortest[1:10,],dst=shortest[11:20,],exclude=NULL,gepaf=FALSE,measure=c("duration","distance"),osrm.server = getOption("osrm.server"),osrm.profile = getOption("osrm.profile"))
time$distances
uoa439=fulladd("70","Symonds Street")
center=as.vector(st_coordinates(uoa439))
xmin=center[[1]]-30000
xmax=center[[1]]+120000
ymin=center[[2]]-150000
ymax=center[[2]]+15000
ext1=extent(xmin,xmax,ymin,ymax)
r1=raster(ext1,res=3000,crs=2193)
r1 = rasterize(nzpolygon, r1)
# Use the local function (overlay) to convert the Raster into a mask
r1 = overlay(r1,fun=function(x){ifelse(x==14,1,NA)})
r1=rasterToPoints(r1,spatial=TRUE)
source("Task8.R")
distances=OSRMdistances(uoa439,st_as_sf(r1))
tm_shape(distances)+tm_dots(col="dist",palette="Spectral")+tm_layout(legend.outside = TRUE)
distmodel=gstat(formula=dist~1,locations=distances,nmax=15,set=list(idp=7))
ext1=extent(xmin,xmax,ymin,ymax)
r2=raster(ext1,res=150,crs=2193)
r2 = rasterize(nzpolygon, r2)
grid2=as(r2,"SpatialGrid")
distpred=predict(distmodel,grid2)
dist_brick = brick(distpred)
dist_prediction=dist_brick[[1]] %>% mask(r2)
names(dist_prediction) = "Distance"
tm_shape(dist_prediction)+tm_raster(palette = "Spectral")+tm_layout(legend.outside = TRUE)+tm_shape(uoa439)+tm_dots()
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
tm_shape(range)+tm_raster(palette = "Pastel1",labels=c("Hoverboard","Lime scooter", "Electric car","Outside range"),n=3)+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "Pastel1")+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "Pastel1",n=4)+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "Pastel1",n=5)+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "reds",n=5)+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "Reds",n=5)+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "Spectrals",n=5)+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "Spectral",n=5)+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "Spectral",n=4)+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster(palette = "Spectral")+tm_layout(legend.outside = TRUE)
head(range)
as.factor(range)
range=as.factor(reclassify(dist_prediction,reclass_m))
tm_shape(range)+tm_raster(palette = "Spectral")+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)
range
tm_shape(range)+tm_raster
tm_shape(range)+tm_raster()
range=reclassify(dist_prediction,reclass_m)
as.factor(range)
k=as.factor(range)
tm_shape(k)+tm_raster()
range$Distance
View(range)
View(range)
range$value
range$data
asFactor(range)
tm_shape(range)+tm_raster
tm_shape(range)+tm_raster()
k=asFactor(range)
tm_shape(k)+tm_raster()
k=ratify(range)
rat=levels(k)[[1]]
rat
rat$Pixel_Values=1:4
levels(r3)=rat
levels(range)=rat
tm_shape(range)+tm_raster()
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]
rat$Pixel_Values=1:4
rat$Class_Names=c("Hover Board","Lime Scooter","Electric car","Out of range")
levels(range)=rat
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]
levels(range)=rat
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]
rat$Pixel_Values=1:4
rat$Class_Names=c("Hover Board","Lime Scooter","Electric car","Out of range")
levels(range)=rat|>mutate(legends=c("Hover Board","Lime Scooter","Electric car","Out of range"))
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]|>mutate(legends=c("Hover Board","Lime Scooter","Electric car","Out of range"))
rat$Pixel_Values=1:4
rat$Class_Names=c("Hover Board","Lime Scooter","Electric car","Out of range")
levels(range)=rat
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]|>mutate(legends=c("Hover Board","Lime Scooter","Electric car","Out of range"))
rat$Pixel_Values=1:4
levels(range)=rat
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]|>mutate(legends=c("Hover Board","Lime Scooter","Electric car","Out of range"))
rat$Pixel_Values=1:4
levels(range)=rat
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)+tm_shape(uoa439)+tm_dots()
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]|>mutate(legends=c("Hover Board","Lime Scooter","Electric car","Out of range"))
rat$Pixel_Values=1:4
levels(range)=rat
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)+tm_shape(uoa439)+tm_dots(labels=("70 Symonds Street"))
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]|>mutate(legends=c("Hover Board","Lime Scooter","Electric car","Out of range"))
rat$Pixel_Values=1:4
levels(range)=rat
name(range)="Range"
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]|>mutate(legends=c("Hover Board","Lime Scooter","Electric car","Out of range"))
rat$Pixel_Values=1:4
levels(range)=rat
names(range)="Range"
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)+tm_shape(uoa439)+tm_dots(labels=("70 Symonds Street"))
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]|>mutate(legends=c("Hover Board","Lime Scooter","Electric car","Out of range"))
rat$Pixel_Values=1:4
levels(range)=rat
names(range)="Range"
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)+tm_shape(uoa439)+tm_dots()
reclass_df <- c(0, 32e3, 1,
32e3, 100e3, 2,
100e3, 210e3, 3,
210e3, Inf, 4)
reclass_m <- matrix(reclass_df,
ncol = 3,
byrow = TRUE)
range=reclassify(dist_prediction,reclass_m)
k=ratify(range)
rat=levels(k)[[1]]|>mutate(legends=c("Hoverboard","Lime Scooter","Electric car","Out of range"))
rat$Pixel_Values=1:4
levels(range)=rat
names(range)="Range"
tm_shape(range)+tm_raster()+tm_layout(legend.outside = TRUE)+tm_shape(uoa439)+tm_dots()
distmodel=gstat(formula=dist~1,locations=distances,nmax=15,set=list(idp=7))
ext1=extent(xmin,xmax,ymin,ymax)
r2=raster(ext1,res=150,crs=2193)
r2 = rasterize(nzpolygon, r2)
grid2=as(r2,"SpatialGrid")
distpred=predict(distmodel,grid2)
dist_brick = brick(distpred)
dist_prediction=dist_brick[[1]] %>% mask(r2)
names(dist_prediction) = "Distance"
tm_shape(dist_prediction)+tm_raster(palette = "Spectral")+tm_layout(legend.outside = TRUE)+tm_shape(uoa439)+tm_dots()
source("Task8.R")
distances=OSRMdistances(uoa439,st_as_sf(r1))
tm_shape(distances)+tm_dots(col="dist",palette="Spectral")+tm_layout(legend.outside = TRUE)
shortest=osrmRoute(home,uoa402)
shortest=st_as_sf(shortest, coords=c("lon","lat"),crs=4326)
shortest=st_transform(shortest, 2193)
shortest_line=shortest|>summarise(do_union=F)|>st_cast("LINESTRING")
tm_shape(uniroute)+tm_dots()+tm_shape(shortest_line)+tm_lines(col="red")
library(osrm)
library(sf)
library(sf)
library(spData)
library (tidyverse)
library(tmap)
tmap_mode("view")
tm_shape(supermarket)+tm_dots(col='Type')
supermarket=read.csv('data/WoolworthsLocations.csv')
#Convert Longitude and Latitude to be a geometry, using EPSG 4326 system
supermarket=st_as_sf(supermarket,coords=c("Long","Lat"),crs=4326)
#Transform coordinate into NZGD2000 coordinate system
supermarket=st_transform(supermarket,2193)
#Read Supermarket location data from the csv
supermarket=read.csv('data/WoolworthsLocations.csv')
setwd("C:/Users/minhn/263-OR-Project")
supermarket=read.csv('data/WoolworthsLocations.csv')
#Convert Longitude and Latitude to be a geometry, using EPSG 4326 system
supermarket=st_as_sf(supermarket,coords=c("Long","Lat"),crs=4326)
#Transform coordinate into NZGD2000 coordinate system
supermarket=st_transform(supermarket,2193)
tm_shape(supermarket)+tm_dots(col='Type')
tm_shape(supermarket)+tm_dots(col='Type')|>editMap()
library(mapedit)
tm_shape(supermarket)+tm_dots(col='Type')|>editMap()
?viewrgb
library(mapview)
?viewRGB
mapview(supermarket)
?mapview
mapview(supermarket,col='Type')
mapview(supermarket,zcol='Type')
mapview(supermarket,zcol='Type')|>editMap()
#Create an interactive map for the supermarket data set to draw polygon for the path
mapview(supermarket,zcol='Type',color=hcl.colors(n, palette = "Dark2"))|>editMap()
#Create an interactive map for the supermarket data set to draw polygon for the path
mapview(supermarket,zcol='Type',color=hcl.colors(n, palette = "viridis"))|>editMap()
library(leaflet)
#Create an interactive map for the supermarket data set to draw polygon for the path
leaflet(supermarket)|>editMap()
#Create an interactive map for the supermarket data set to draw polygon for the path
leaflet(supermarket)|>addTiles()
#Create an interactive map for the supermarket data set to draw polygon for the path
leaflet(supermarket) %>% addTiles() %>%
addCircleMarkers(radius=5)
#Read Supermarket location data from the csv
supermarket_raw=read.csv('data/WoolworthsLocations.csv')
#Create an interactive map for the supermarket data set to draw polygon for the path
leaflet(supermarket_raw) %>% addTiles() %>%
addCircleMarkers(radius=5)
#Create an interactive map for the supermarket data set to draw polygon for the path
leaflet(supermarket_raw) %>% addTiles() %>%
addCircleMarkers(radius=5,color='Type')
#Create an interactive map for the supermarket data set to draw polygon for the path
colorNum = colorNumeric("Dark2",supermarket_raw$type)
leaflet(supermarket_raw) %>% addTiles() %>%
addCircleMarkers(radius=5,color=~colorNum(supermarket_raw$Type))
#Create an interactive map for the supermarket data set to draw polygon for the path
colorNum = colorFactor("Dark2",supermarket_raw$type)
leaflet(supermarket_raw) %>% addTiles() %>%
addCircleMarkers(radius=5,color=~colorNum(supermarket_raw$Type))
leaflet(supermarket_raw) %>% addTiles() %>%
addCircleMarkers(radius=5,color=~colorNum(supermarket_raw$Type))%>%editMap()
